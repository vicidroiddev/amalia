apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

Properties devProperties = new Properties()
def devPropertiesFile = project.file('dev.properties')

if (devPropertiesFile.exists()) {
    devProperties.load(devPropertiesFile.newDataInputStream())
}

def devPropertiesToken = devProperties.getProperty('api.themoviedb')

ext.themoviedbToken = devPropertiesToken != null ? devPropertiesToken : System.getenv('api.themoviedb')

android {
    compileSdkVersion toolchainVersions.compileSdk
    buildToolsVersion toolchainVersions.buildTools

    defaultConfig {
        applicationId "com.vicidroid.amalia.sample"
        minSdkVersion toolchainVersions.minSdk
        targetSdkVersion toolchainVersions.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField('String', 'themoviedbToken', themoviedbToken ?: "NOT_THE_REAL_KEY")

    }

    // Target Java 8 to use androidx.lifecycle.DefaultLifecycleObserver
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    repositories {
        maven { url 'https://jitpack.io' }
    }
}

androidExtensions {
    experimental = true
}

kapt {
    useBuildCache = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // JETBRAINS
    implementation deps.coroutines
    implementation deps.kotlinStdlib

    // ANDROID X
    implementation androidXDeps.appcompat
    implementation androidXDeps.annotation
    implementation androidXDeps.coreKtx
    implementation androidXDeps.constraintLayout
    implementation androidXDeps.legacySupport
    implementation androidXDeps.recyclerview

    // MATERIAL
    implementation 'com.google.android.material:material:1.2.0-beta01'

    // TESTS
    testImplementation deps.junit

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'
    implementation 'com.squareup.moshi:moshi:1.9.2'
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.9.2'

    implementation('com.github.bumptech.glide:glide:4.11.0') {
        exclude group: "com.android.support"
    }

    // Adding navigation components
//    implementation 'androidx.navigation:navigation-fragment:2.2.1'
//    implementation 'androidx.navigation:navigation-ui:2.2.1'
//    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.1'
//    implementation 'androidx.navigation:navigation-ui-ktx:2.2.1'

    // AMALIA LIB EXTERNAL
    def amaliaVersion = "0.7.2"

    // aar includes android resource files, jar does not.
    // We should explicitly ask for an aar by using @aar
    // Note: when using @aar syntax, gradle will drop transitive dependencies.
    // We must include transitive dependencies to support the android libraries amalia depends on.
//    implementation ("com.github.vicidroiddev.amalia:amalia-core:$amaliaVersion@aar") {
//        transitive = true
//    }
//    implementation ("com.github.vicidroiddev.amalia:amalia-coroutine-scopes:$amaliaVersion@aar")
//    implementation ("com.github.vicidroiddev.amalia:amalia-recyclerview:$amaliaVersion@aar")

    // AMALIA LIB INTERNAL
    implementation project(path: ':amalia-core')
    implementation project(path: ':amalia-coroutine-scopes')
    implementation project(path: ':amalia-recyclerview')

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'
}

apply plugin: 'kotlin-android-extensions'
